import os
import requests
from jira import JIRA, JIRAError
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import TelegramError  # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
from telegram.ext import CallbackQueryHandler, ApplicationBuilder, CommandHandler
import asyncio
import json
from collections import defaultdict
from datetime import datetime, timedelta
import pytz
import re
import time

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Jira
JIRA_SERVER = 'https://jira.informatics.ru'  # URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Jira
JIRA_USER = ''  # –í–∞—à –ª–æ–≥–∏–Ω –∏–ª–∏ email –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Jira
JIRA_PASSWORD = ''  # –í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Jira

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram
TELEGRAM_TOKEN = ''  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
TELEGRAM_CHAT_ID = ''  # ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è

# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
SUPPORT_STAFF = [
    {"name": "—Å–∞–ø–ø 1", "jira_login": "ivanov"},
    {"name": "—Å–∞–ø–ø 2", "jira_login": "nesterov"},
    {"name": "—Å–∞–ø–ø 3", "jira_login": "bochenkov"},
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Jira –∫–ª–∏–µ–Ω—Ç–∞
jira_options = {'server': JIRA_SERVER}
jira = JIRA(options=jira_options, basic_auth=(JIRA_USER, JIRA_PASSWORD))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
task_status = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
BOT_START_TIME = datetime.now()

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
PINNED_MESSAGE_ID = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
class DutySystem:
    def __init__(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ 2/2
        base_date = datetime(2024, 11, 12).date()  # 11.12.2024
        # –°—Ç–∞–≤–∏–º —Ä–µ–±—è—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ, –∫–∞–∫ –Ω–∞–¥–æ
        self.duty_users = {
            "yudin": {
                "name": "–Æ–¥–∏–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω",
                "username": "@yudin",
                "schedule_type": "2/2",
                "start_date": base_date  # –ù–∞—á–∞–ª–æ —Å–º–µ–Ω –Æ–¥–∏–Ω–∞
            },
            "obordoev": {
                "name": "–û–±–æ—Ä–¥–æ–µ–≤ –í–∞–¥–∏–º",
                "username": "@obordoev",
                "schedule_type": "2/2",
                "start_date": base_date + timedelta(days=2)  # –ù–∞—á–∞–ª–æ —Å–º–µ–Ω –û–±–æ—Ä–¥–æ–µ–≤–∞ (—á–µ—Ä–µ–∑ 2 –¥–Ω—è)
            },
            "karpuhin": {
                "name": "–ö–∞—Ä–ø—É—Ö–∏–Ω –ü–µ—Ç—Ä",
                "username": "@karpuhin",
                "schedule_type": "5/2",
                "work_days": [0, 1, 2, 3, 4]
            }
        }
        
        self.duty_schedule = {}

    def is_working_day(self, user_id, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—á–∏–π –ª–∏ –¥–µ–Ω—å —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if isinstance(date, datetime):
            date = date.date()
            
        user = self.duty_users.get(user_id)
        if not user:
            return False

        if user["schedule_type"] == "2/2":
            # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ 2/2 —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
            days_passed = (date - user["start_date"]).days
            return (days_passed // 2) % 2 == 0

        elif user["schedule_type"] == "5/2":
            # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ 5/2 –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—É–¥–Ω–∏–π –ª–∏ –¥–µ–Ω—å
            return date.weekday() in user["work_days"]

        return False

    async def get_duty_for_date(self, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if isinstance(date, datetime):
            date = date.date()
            
        date_str = date.strftime('%Y-%m-%d')
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        if date_str in self.duty_schedule:
            return [self.duty_schedule[date_str]]

        duties = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–∞—Ä–ø—É—Ö–∏–Ω–∞ (5/2)
        if date.weekday() in [0, 1, 2, 3, 4]:  # –ü–Ω-–ü—Ç
            duties.append("karpuhin")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∂—É—Ä–Ω—ã—Ö 2/2
        for user_id in ["yudin", "obordoev"]:
            if self.is_working_day(user_id, date):
                duties.append(user_id)
                
        return duties if duties else None

    async def get_current_duty(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ"""
        return await self.get_duty_for_date(datetime.now().date())

    async def get_week_schedule(self, start_date=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        if not start_date:
            today = datetime.now().date()
            start_date = today - timedelta(days=today.weekday())
        elif isinstance(start_date, datetime):
            start_date = start_date.date()
        
        schedule = []
        for i in range(7):
            date = start_date + timedelta(days=i)
            duty_ids = await self.get_duty_for_date(date)
            
            if duty_ids:
                duty_names = []
                for duty_id in duty_ids:
                    duty_info = self.duty_users[duty_id]
                    duty_names.append(f"{duty_info['name']} ({duty_info['schedule_type']})")
                duty_text = "\n    ".join(duty_names)
            else:
                duty_text = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            
            schedule.append({
                'date': date,
                'duty': duty_text
            })
        
        return schedule

    async def set_duty(self, date_str, user_id):
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–∞ –¥–∞—Ç—É (—Ä—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)"""
        if user_id in self.duty_users:
            self.duty_schedule[date_str] = user_id
            return True
        return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –¥–µ–∂—É—Ä—Å—Ç–≤
duty_system = DutySystem()


def create_task_keyboard(issue_key, is_taken=False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    take_emoji = "‚úÖ" if is_taken else "üìã"
    take_text = "–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É" if is_taken else "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"

    keyboard = [
        [
            InlineKeyboardButton(f"{take_emoji} {take_text}",
                               callback_data=f"take:{issue_key}")
        ],
        [
            InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
                               callback_data=f"comment:{issue_key}"),
            InlineKeyboardButton("üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å",
                               callback_data=f"assign:{issue_key}")
        ],
        [
            InlineKeyboardButton("üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                               callback_data=f"details:{issue_key}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_take_action_keyboard(issue_key):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É"""
    keyboard = [
        [
            InlineKeyboardButton(
                "üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è'",
                callback_data=f"analyze:{issue_key}"
            )
        ],
        [
            InlineKeyboardButton(
                "üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ",
                url=f"{JIRA_SERVER}/browse/{issue_key}"
            )
        ],
        [
            InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥",
                callback_data=f"back:{issue_key}"
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_staff_keyboard(issue_key):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    keyboard = []
    for idx, staff in enumerate(SUPPORT_STAFF):
        keyboard.append([
            InlineKeyboardButton(
                f"üë§ {staff['name']}",
                callback_data=f"at:{issue_key}:{idx}"
            )
        ])
    keyboard.append([
        InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data=f"back:{issue_key}"
        )
    ])
    return InlineKeyboardMarkup(keyboard)


async def send_telegram_message(message, issue_key=None):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID —á–∞—Ç–æ–≤ –Ω–∞ —Å–ø–∏—Å–æ–∫
        chat_ids = TELEGRAM_CHAT_ID.split(',')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        for chat_id in chat_ids:
            try:
                if issue_key:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    is_taken = task_status.get(issue_key, False)
                    await bot.send_message(
                        chat_id=chat_id.strip(),  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                        text=message,
                        parse_mode='HTML',
                        reply_markup=create_task_keyboard(issue_key, is_taken)
                    )
                else:
                    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    await bot.send_message(
                        chat_id=chat_id.strip(),  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                        text=message,
                        parse_mode='HTML'
                    )
            except TelegramError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –Ω–µ —É–¥–∞–ª—Å—è
                
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def handle_button_click(update, context):
    query = update.callback_query
    try:
        data = query.data.split(':')
        action = data[0]
        issue_key = data[1] if len(data) > 1 else None

        print(f"–ü–æ–ª—É—á–µ–Ω callback: action={action}, issue_key={issue_key}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        if action == 'take':
            current_status = task_status.get(issue_key, False)
            task_status[issue_key] = not current_status

            try:
                issue = jira.issue(issue_key)
                if not current_status:  # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±–µ—Ä–µ—Ç—Å—è –≤ —Ä–∞–±–æ—Ç—É
                    await query.message.edit_reply_markup(
                        reply_markup=create_take_action_keyboard(issue_key)
                    )
                    await query.answer("–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
                else:
                    new_keyboard = create_task_keyboard(issue_key, False)
                    await query.message.edit_reply_markup(reply_markup=new_keyboard)
                    await query.answer("–ó–∞–¥–∞—á–∞ —Å–Ω—è—Ç–∞ —Å —Ä–∞–±–æ—Ç—ã")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {issue_key}: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {str(e)}")

        elif action == 'analyze':
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ {issue_key}")
            try:
                issue = jira.issue(issue_key)
                transitions = jira.transitions(issue)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                current_status = issue.fields.status.name
                print(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {issue_key}: {current_status}")
                
                if current_status == "–¢–ò–ö–ï–¢ –°–û–ó–î–ê–ù":
                    # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
                    print("–°—Ç–∞—Ç—É—Å '–¢–ò–ö–ï–¢ –°–û–ó–î–ê–ù': –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–≤—É—Ö—à–∞–≥–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥")
                    
                    # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
                    transition_id = "271"  # ID –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
                    print(f"–®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ '–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' (ID: {transition_id})")
                    jira.transition_issue(issue, transition_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
                    transitions = jira.transitions(issue)
                    
                    # –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                    transition_id = "81"  # ID –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                    print(f"–®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –≤ '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è' (ID: {transition_id})")
                    jira.transition_issue(issue, transition_id)
                    
                else:
                    # –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                    print(f"–°—Ç–∞—Ç—É—Å '{current_status}': –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è'")
                    transition_id = "81"
                    jira.transition_issue(issue, transition_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                new_keyboard = create_task_keyboard(issue_key, True)
                await query.message.edit_reply_markup(reply_markup=new_keyboard)
                await query.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è'")
                print(f"–ó–∞–¥–∞—á–∞ {issue_key} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è'")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

        elif action == 'comment':
            await query.answer("–§—É–Ω–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

        elif action == 'assign':
            new_keyboard = create_staff_keyboard(issue_key)
            await query.message.edit_reply_markup(reply_markup=new_keyboard)
            await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

        elif action == 'at':
            try:
                staff_idx = int(data[2])
                if 0 <= staff_idx < len(SUPPORT_STAFF):
                    staff = SUPPORT_STAFF[staff_idx]
                    user_login = staff['jira_login']

                    if not user_login:
                        await query.answer("–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –≤ Jira")
                        return

                    issue = jira.issue(issue_key)
                    jira.assign_issue(issue, user_login)

                    new_keyboard = create_task_keyboard(issue_key)
                    await query.message.edit_reply_markup(reply_markup=new_keyboard)
                    await query.answer(f"–ó–∞–¥–∞—á–∞ {issue_key} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {staff['name']}")
                else:
                    await query.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

        elif action == 'back':
            new_keyboard = create_task_keyboard(issue_key, task_status.get(issue_key, False))
            await query.message.edit_reply_markup(reply_markup=new_keyboard)
            await query.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é")

        elif action == 'details':
            try:
                issue = jira.issue(issue_key)
                details = f"""
<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ {issue_key}</b>

–°—Ç–∞—Ç—É—Å: {issue.fields.status.name}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {issue.fields.priority.name}
–°–æ–∑–¥–∞–Ω–∞: {issue.fields.created[:10]}
–ê–≤—Ç–æ—Ä: {issue.fields.reporter.displayName}
"""
                await bot.send_message(
                    chat_id=query.message.chat_id,
                    text=details,
                    parse_mode='HTML'
                )
                await query.answer()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {str(e)}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def authenticate_and_notify():
    max_retries = 3
    retry_count = 0

    while retry_count < max_retries:
        try:
            jira_options = {'server': JIRA_SERVER}
            jira = JIRA(options=jira_options, basic_auth=(JIRA_USER, JIRA_PASSWORD))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            server_info = jira.server_info()
            await send_telegram_message("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–Ω –∫ JIRA\nüîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...\n\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n\n - –§–∏–∫—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–º–µ–Ω –¥–ª—è 2/2 (—Ç–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Å–µ–≥–¥–∞) ")
            return jira

        except JIRAError as e:
            retry_count += 1
            wait_time = 300  # 5 –º–∏–Ω—É—Ç

            if "401" in str(e):
                error_msg = " –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å."
            elif "404" in str(e):
                error_msg = "üîç –°–µ—Ä–≤–µ—Ä JIRA –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL."
            elif "500" in str(e):
                error_msg = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ JIRA."
            elif "503" in str(e):
                error_msg = "üîß –°–µ—Ä–≤–µ—Ä JIRA –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ JIRA: {str(e)}"

            await send_telegram_message(
                f"{error_msg}\n"
                f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry_count} –∏–∑ {max_retries}\n"
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time // 60} –º–∏–Ω—É—Ç"
            )

            await asyncio.sleep(wait_time)

        except Exception as e:
            retry_count += 1
            error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—è –æ—à–∏–±–∫–∞: {str(e)}"
            await send_telegram_message(
                f"{error_msg}\n"
                f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry_count} –∏–∑ {max_retries}\n"
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
            )
            await asyncio.sleep(300)

    raise Exception("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")


# –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏–∑–±–µ–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
last_seen_issue_id = None


def create_formatted_message(issue, issue_type="New"):
    try:
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {issue.key}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        priority = getattr(issue.fields, 'priority', None)
        priority_text = priority.name if priority else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∞
        priority_emoji = {
            "–ë–æ–º–±–∏—Ç": "üí£",
            "–°—Ä–æ—á–Ω—ã–π": "üî¥",
            "–í—ã—Å–æ–∫–∏–π": "üü†",
            "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π": "üü°",
            "–ù–∏–∑–∫–∏–π": "‚ö™"
        }.get(priority_text, "‚ö™")

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        type_emoji = {
            "–û—à–∏–±–∫–∞": "‚ùå",
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "",
            "–ó–∞–¥–∞–∞": "‚úÖ",
            "–î–æ—Å—Ç—É–ø—ã": "üîë",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞": "üõ†Ô∏è",
            "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å": "üíª",
            "Mark support": "üìã",
            "TGBot": "ü§ñ",
            "–ò–Ω—Ü–∏–¥–µ–Ω—Ç": "‚ö°"
        }

        reporter = getattr(issue.fields, 'reporter', None)
        reporter_name = reporter.displayName if reporter else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        issue_type_name = getattr(issue.fields, 'issuetype', None)
        issue_type_name = issue_type_name.name if issue_type_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        type_emoji_display = type_emoji.get(issue_type_name, "üìù")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = issue.fields.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Ç–≤—É–µ—Ç"
        description = description.replace('\n', '\n    ')
        if len(description) > 300:
            description = description[:297] + "..."

        message = f"""
‚ïî‚ïê‚ïê üé´ –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –í JIRA üé´ ‚ïê‚ïê‚ïó

‚û§ *–ù–∞–∑–≤–∞–Ω–∏–µ:*
    {issue.fields.summary}

‚û§ *–¢–∏–ø –∑–∞–¥–∞—á–∏:*
    {type_emoji_display} {issue_type_name}

‚û§ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:*
    {priority_emoji} {priority_text}

‚û§ *–°–æ–∑–¥–∞–ª:*
    {reporter_name}

‚û§ *–û–ø–∏—Å–∞–Ω–∏–µ:*
    {description}

‚û§ *–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É:*
    {JIRA_SERVER}/browse/{issue.key}

"""
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è {issue.key}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return message
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {issue.key}: {str(e)}"


async def check_new_issues(jira):
    global last_seen_issue_id
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    
    try:
        chat_ids = [id.strip() for id in TELEGRAM_CHAT_ID.split(',')]
        print(f"–°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {chat_ids}")
        
        jql_query = 'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND status in ("–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", –û–∂–∏–¥–∞–Ω–∏–µ, "–¢–ò–ö–ï–¢ –°–û–ó–î–ê–ù") and NOT issuetype = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ " and NOT issuetype = –î–æ—Å—Ç—É–ø—ã'
        issues = jira.search_issues(jql_query, maxResults=1)
        
        if not issues:
            print("–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        latest_issue = issues[0]
        current_issue_id = latest_issue.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–π –∑–∞–¥–∞—á–µ
        if last_seen_issue_id == current_issue_id:
            print(f"–ó–∞–¥–∞—á–∞ {latest_issue.key} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
            
        print(f"–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {latest_issue.key} (ID: {current_issue_id})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        last_seen_issue_id = current_issue_id
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
        message = create_formatted_message(latest_issue)
        keyboard = create_task_keyboard(latest_issue.key, False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        for chat_id in chat_ids:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id: {chat_id}")
            try:
                await bot.send_message(
                    chat_id=int(chat_id),
                    text=message,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")
                continue
                
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á: {str(e)}"
        print(error_msg)
        for chat_id in chat_ids:
            try:
                await bot.send_message(
                    chat_id=int(chat_id),
                    text=f"‚ùå {error_msg}",
                    parse_mode='HTML'
                )
            except Exception as send_error:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç {chat_id}: {str(send_error)}")


async def scheduler(jira):
    while True:
        await check_new_issues(jira)
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("tasks", show_active_tasks))
    application.add_handler(CommandHandler("urgent", show_urgent_tasks))
    application.add_handler(CommandHandler("search", start_search))
    application.add_handler(CommandHandler("status", check_status))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(CommandHandler("services", check_services_command))
    
    # –í–∞–∂–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ü–û–°–õ–ï –∫–æ–º–∞–Ω–¥
    # –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –í–°–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã callback_data
    application.add_handler(CallbackQueryHandler(handle_button_click, pattern=None))

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    async def run_polling():
        await application.initialize()
        await application.start()
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        
        try:
            while True:
                await asyncio.sleep(1)
        finally:
            await application.stop()

    async def run_jira_checker():
        while True:
            try:
                jira = await authenticate_and_notify()
                await scheduler(jira)
            except Exception as e:
                await send_telegram_message(
                    f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}\n"
                    "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥..."
                )
                await asyncio.sleep(10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    try:
        await asyncio.gather(
            run_polling(),
            run_jira_checker()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        if application.running:
            await application.stop()


# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
async def show_active_tasks(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    try:
        # JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        jql = 'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND status not in (Closed, Resolved) ORDER BY created DESC'
        issues = jira.search_issues(jql, maxResults=10)

        if not issues:
            await query.message.edit_text(
                "üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_main_menu_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
        
        for idx, issue in enumerate(issues, 1):
            priority = getattr(issue.fields, 'priority', None)
            priority_text = priority.name if priority else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_emoji = {
                "–ë–æ–º–±–∏—Ç": "üí£",
                "–°—Ä–æ—á–Ω—ã–π": "üî¥",
                "–í—ã—Å–æ–∫–∏–π": "üü†",
                "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π": "üü°",
                "–ù–∏–∑–∫–∏–π": "‚ö™"
            }.get(priority_text, "‚ö™")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏
            message += (
                f"{idx}. {priority_emoji} [{issue.key}]({JIRA_SERVER}/browse/{issue.key})\n"
                f"   *{issue.fields.summary[:100]}*\n"
                f"   –°—Ç–∞—Ç—É—Å: {issue.fields.status.name}\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        message += "\n_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á_"

        await query.message.edit_text(
            message,
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=create_main_menu_keyboard()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á",
            reply_markup=create_main_menu_keyboard()
        )

async def show_urgent_tasks(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    try:
        # JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
        jql = '''project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND 
                (priority in (Highest, High) OR 
                 duedate < now()) AND 
                status not in (Closed, Resolved)
                ORDER BY priority DESC, created DESC'''
        issues = jira.search_issues(jql, maxResults=10)

        if not issues:
            await query.message.edit_text(
                "üîç –°—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_main_menu_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üö® *–°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
        
        for idx, issue in enumerate(issues, 1):
            priority = getattr(issue.fields, 'priority', None)
            priority_text = priority.name if priority else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            priority_emoji = {
                "–ë–æ–º–±–∏—Ç": "üí£",
                "–°—Ä–æ—á–Ω—ã–π": "üî¥",
                "–í—ã—Å–æ–∫–∏–π": "üü†",
                "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π": "üü°",
                "–ù–∏–∑–∫–∏–π": "‚ö™"
            }.get(priority_text, "‚ö™")

            message += (
                f"{idx}. {priority_emoji} [{issue.key}]({JIRA_SERVER}/browse/{issue.key})\n"
                f"   *{issue.fields.summary[:100]}*\n"
                f"   –°—Ç–∞—Ç—É—Å: {issue.fields.status.name}\n\n"
            )

        message += "\n_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á_"

        await query.message.edit_text(
            message,
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=create_main_menu_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á",
            reply_markup=create_main_menu_keyboard()
        )

async def start_search(update, context):
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á"""
    if not context.args:
        await update.message.reply_text(
            "‚ÑπÔ∏è –î–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n"
            "/search <—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞>"
        )
        return

    search_text = ' '.join(context.args)
    try:
        jql = f'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND (summary ~ "{search_text}" OR description ~ "{search_text}")'
        issues = jira.search_issues(jql, maxResults=10)

        if not issues:
            await update.message.reply_text(
                f"üîç –ó–∞–¥–∞—á –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_main_menu_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* _{search_text}_\n\n"
        
        for idx, issue in enumerate(issues, 1):
            priority = getattr(issue.fields, 'priority', None)
            priority_text = priority.name if priority else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_emoji = {
                "–ë–æ–º–±–∏—Ç": "üí£",
                "–°—Ä–æ—á–Ω—ã–π": "üî¥",
                "–í—ã—Å–æ–∫–∏–π": "üü†",
                "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π": "üü°",
                "–ù–∏–∑–∫–∏–π": "‚ö™"
            }.get(priority_text, "‚ö™")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏
            message += (
                f"{idx}. {priority_emoji} [{issue.key}]({JIRA_SERVER}/browse/{issue.key})\n"
                f"   *{issue.fields.summary[:100]}*\n"
                f"   –°—Ç–∞—Ç—É—Å: {issue.fields.status.name}\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        message += "\n_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤_"

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=create_main_menu_keyboard()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á",
            reply_markup=create_main_menu_keyboard()
        )

async def check_status(update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira
        server_info = jira.server_info()

        status_message = f"""
üü¢ *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

*JIRA:*
‚úÖ –°–µ—Ä–≤–µ—Ä: {server_info['serverTitle']}
‚úÖ –í–µ—Ä—Å–∏—è: {server_info['version']}
‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: OK

*Telegram Bot:*
‚úÖ –ê–∫—Ç–∏–≤–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç
"""
        await update.message.reply_text(status_message, parse_mode='Markdown')

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def show_help(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ *–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –º–µ–Ω—é
/tasks - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ
/urgent - —Å—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/search <—Ç–µ–∫—Å—Ç> - –ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º
/status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º
/services - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏:*
‚Ä¢ "üìã –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π
‚Ä¢ "üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)" - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
‚Ä¢ "üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å" - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
‚Ä¢ "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏" - –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏

*–î–µ–∂—É—Ä—Å—Ç–≤–∞:*
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 5/2 (–ü–Ω-–ü—Ç): –ö–∞—Ä–ø—É—Ö–∏–Ω –ü.
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 2/2: –Æ–¥–∏–Ω –ö., –û–±–æ—Ä–¥–æ–µ–≤ –í.

*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤:*
‚Ä¢ informatics.ru - –ø—Ä–æ–¥
‚Ä¢ teacher.edu-app.ru - —Ç–∏—á–µ—Ä
‚Ä¢ jira.informatics.ru - –∂–∏—Ä–∞
‚Ä¢ my.mshp.ru - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ 2035

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –±–æ—Ç–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @yudin
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

def create_navigation_keyboard(current_page, total_pages, command):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    keyboard = []
    buttons = []

    if current_page > 1:
        buttons.append(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav:{command}:{current_page - 1}")
        )

    buttons.append(
        InlineKeyboardButton(f"üìÑ {current_page}/{total_pages}", callback_data="noop")
    )

    if current_page < total_pages:
        buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"nav:{command}:{current_page + 1}")
        )

    keyboard.append(buttons)
    return InlineKeyboardMarkup(keyboard)

def create_stats_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìä –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats:week"),
            InlineKeyboardButton("üìà –ó–∞ –º–µ—Å—è—Ü", callback_data="stats:month")
        ],
        [
            InlineKeyboardButton("üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data="stats:users"),
            InlineKeyboardButton("üéØ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º", callback_data="stats:priorities")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö callback-–∫–Ω–æ–ø–æ–∫
async def handle_button_click(update, context):
    query = update.callback_query
    try:
        bot_stats.add_user(update.effective_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        data = query.data.split(':')
        action = data[0]

        if action == 'menu':
            menu_action = data[1]
            if menu_action == 'tasks':
                await show_active_tasks(query, context)
            elif menu_action == 'urgent':
                await show_urgent_tasks(query, context)
            elif menu_action == 'search':
                await query.message.edit_text(
                    "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/search <—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞>",
                    reply_markup=create_main_menu_keyboard()
                )
            elif menu_action == 'status':
                await show_status_from_callback(query)
            elif menu_action == 'help':
                await show_help_from_callback(query)
            elif menu_action == 'services':
                message = await check_edu_services()
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:back")]
                ]
                await query.message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif menu_action == 'back':
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=create_main_menu_keyboard()
                )
            await query.answer()

        elif action == 'take':
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
            ...

        elif action == 'analyze':
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
            ...

        elif action == 'back':
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            ...

    except Exception as e:
        bot_stats.add_error(e)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_week_stats(query):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
    week_ago = (datetime.now(pytz.UTC) - timedelta(days=7)).strftime('%Y-%m-%d')
    stats = await get_period_stats(week_ago)

    message = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é*

üì• –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á: {stats['new']}
‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {stats['resolved']}
‚ö° –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats['waiting']}
"""
    await query.message.edit_text(message, parse_mode='Markdown', reply_markup=create_stats_keyboard())
    await query.answer()

async def show_month_stats(query):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ show_week_stats, –Ω–æ –∑–∞ –º–µ—Å—è—Ü
    pass

async def show_users_stats(query):
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    pass

async def show_priorities_stats(query):
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    pass

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_period_stats(start_date):
    try:
        new_tasks_jql = f'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND created >= "{start_date}"'
        resolved_tasks_jql = f'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND resolved >= "{start_date}"'
        in_progress_jql = 'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND status = "In Progress"'
        waiting_jql = 'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" AND status = Waiting'

        return {
            'new': len(jira.search_issues(new_tasks_jql, maxResults=0)),
            'resolved': len(jira.search_issues(resolved_tasks_jql, maxResults=0)),
            'in_progress': len(jira.search_issues(in_progress_jql, maxResults=0)),
            'waiting': len(jira.search_issues(waiting_jql, maxResults=0))
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'new': 0, 'resolved': 0, 'in_progress': 0, 'waiting': 0}

def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="menu:tasks"),
            InlineKeyboardButton("üö® –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="menu:urgent")
        ],
        [
            InlineKeyboardButton("üì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏", callback_data="menu:recent"),
            InlineKeyboardButton("üë• –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤", callback_data="menu:duty")
        ],
        [
            InlineKeyboardButton("üè• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤", callback_data="menu:services"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu:status")
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu:help")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global PINNED_MESSAGE_ID
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if PINNED_MESSAGE_ID:
        try:
            await bot.unpin_chat_message(chat_id=update.effective_chat.id, message_id=PINNED_MESSAGE_ID)
            await bot.delete_message(chat_id=update.effective_chat.id, message_id=PINNED_MESSAGE_ID)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    welcome_message = """
üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è:
‚Ä¢ üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ üö® –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
‚Ä¢ üë• –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤ - –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–º–µ–Ω–µ
‚Ä¢ ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ üè• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

*–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/tasks - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
/urgent - —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
/search - –ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º
/status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
/help - —Å–ø—Ä–∞–≤–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        message = await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=create_main_menu_keyboard()
        )
        await message.pin(disable_notification=True)
        PINNED_MESSAGE_ID = message.message_id
        
        # –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏
        try:
            await bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=message.message_id + 1
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {e}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot_stats.add_error(e)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
async def show_status_from_callback(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ callback"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JIRA
        try:
            server_info = jira.server_info()
            jira_status = (
                f"‚úÖ –°–µ—Ä–≤–µ—Ä: {server_info.get('serverTitle', 'Jira')}\n"
                f"‚úÖ –í–µ—Ä—Å–∏—è: {server_info.get('version', 'N/A')}\n"
                f"‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: OK"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Jira: {e}")
            jira_status = "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        uptime = bot_stats.get_uptime()
        tasks = bot_stats.processed_tasks
        errors = bot_stats.errors_count
        users = len(bot_stats.active_users)
        last_error = bot_stats.last_error

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        status_message = f"""
üü¢ *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

*JIRA:*
{jira_status}

*Telegram Bot:*
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}
üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {tasks}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 3
‚ùå –û—à–∏–±–æ–∫: {errors}

*–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:*
{last_error['message'] + ' (' + last_error['time'].strftime('%H:%M:%S') + ')' if last_error else '–ù–µ—Ç –æ—à–∏–±–æ–∫'}
"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            status_message,
            parse_mode='Markdown',
            reply_markup=create_main_menu_keyboard()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        bot_stats.add_error(e)
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",
            reply_markup=create_main_menu_keyboard()
        )

async def show_help_from_callback(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ callback"""
    help_text = """
ü§ñ *–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –º–µ–Ω—é
/tasks - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ
/urgent - —Å—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/search <—Ç–µ–∫—Å—Ç> - –ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º
/status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º
/services - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏:*
‚Ä¢ "üìã –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π
‚Ä¢ "üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å" - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
‚Ä¢ "üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å" - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
‚Ä¢ "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏" - –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏

*–î–µ–∂—É—Ä—Å—Ç–≤–∞:*
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 5/2 (–ü–Ω-–ü—Ç): –ö–∞—Ä–ø—É—Ö–∏–Ω –ü.
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 2/2: –Æ–¥–∏–Ω –ö., –û–±–æ—Ä–¥–æ–µ–≤ –í.

*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤:*
‚Ä¢ informatics.ru - –ø—Ä–æ–¥
‚Ä¢ teacher.edu-app.ru - —Ç–∏—á–µ—Ä
‚Ä¢ jira.informatics.ru - –∂–∏—Ä–∞
‚Ä¢ my.mshp.ru - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ 2035

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –±–æ—Ç–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @filinsi
"""
    await query.message.edit_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=create_main_menu_keyboard()
    )

def get_uptime():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        uptime = datetime.now() - BOT_START_TIME
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        parts = []
        if days > 0:
            parts.append(f"{days}–¥")
        if hours > 0:
            parts.append(f"{hours}—á")
        if minutes > 0:
            parts.append(f"{minutes}–º")
        parts.append(f"{seconds}—Å")
        
        return " ".join(parts)
    except:
        return "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

async def show_statistics(update, context):
    """Shows statistics for Jira tasks"""
    try:
        # Create stats keyboard
        await update.message.reply_text(
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:*",
            parse_mode='Markdown',
            reply_markup=create_stats_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=create_main_menu_keyboard()
        )

async def check_edu_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    SERVICES = {
        '–ü—Ä–æ–¥': 'https://informatics.ru',
        '–¢–∏—á–µ—Ä –ø—Ä–æ–¥–∞': 'https://teacher.edu-app.ru',
        'Jira': 'https://jira.informatics.ru',
        '2035': 'https://my.mshp.ru'
    }

    results = {}
    message = "üè• –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:\n\n"

    for name, url in SERVICES.items():
        try:
            start_time = time.time()
            response = requests.get(url, timeout=5, verify=False)
            response_time = round((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                status = "‚úÖ"
                speed = "üöÄ" if response_time < 500 else "‚ö°" if response_time < 1000 else "üê¢"
            else:
                status = "‚ö†Ô∏è"
                speed = "‚ùå"
            
            results[name] = {
                'status': response.status_code,
                'response_time': response_time,
                'emoji_status': status,
                'emoji_speed': speed
            }
            
        except requests.exceptions.ConnectionError:
            results[name] = {
                'status': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'emoji_status': "‚ùå",
                'emoji_speed': "‚ùå"
            }
        except requests.exceptions.Timeout:
            results[name] = {
                'status': '–¢–∞–π–º–∞—É—Ç',
                'emoji_status': "‚ö†Ô∏è",
                'emoji_speed': "‚ùå"
            }
        except Exception as e:
            results[name] = {
                'status': f'–û—à–∏–±–∫–∞: {str(e)}',
                'emoji_status': "‚ùå",
                'emoji_speed': "‚ùå"
            }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for name, info in results.items():
        message += f"{info['emoji_status']} {name}: "
        
        if isinstance(info['status'], int):
            message += f"HTTP {info['status']}"
            message += f" {info['emoji_speed']} ({info['response_time']}ms)\n"
        else:
            message += f"{info['status']}\n"

    return message

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def check_services_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /services"""
    message = await check_edu_services()
    await update.message.reply_text(message)

class BotStats:
    def __init__(self):
        self.start_time = datetime.now()
        self.processed_tasks = 0
        self.commands_used = 0
        self.errors_count = 0
        self.last_error = None
        self.active_users = set()

    def get_uptime(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        uptime = datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        parts = []
        if days > 0:
            parts.append(f"{days}–¥")
        if hours > 0:
            parts.append(f"{hours}—á")
        if minutes > 0:
            parts.append(f"{minutes}–º")
        parts.append(f"{seconds}—Å")
        
        return " ".join(parts)

    def increment_tasks(self):
        self.processed_tasks += 1

    def add_error(self, error):
        self.errors_count += 1
        self.last_error = {
            "message": str(error),
            "time": datetime.now()
        }

    def add_user(self, user_id):
        self.active_users.add(user_id)

bot_stats = BotStats()

async def show_duty_schedule(query, schedule=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤"""
    if schedule is None:
        schedule = await duty_system.get_week_schedule()
    
    message = "üë• *–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏—Ö –¥–µ–∂—É—Ä–Ω—ã—Ö
    current_duties = await duty_system.get_duty_for_date(datetime.now().date())
    if current_duties:
        message += "*–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä—è—Ç:*\n"
        for duty_id in current_duties:
            duty_info = duty_system.duty_users[duty_id]
            message += f"üéØ {duty_info['name']} ({duty_info['schedule_type']})\n"
        message += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é
    message += "*–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n"
    weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    today = datetime.now().date()
    
    for day in schedule:
        date_str = day['date'].strftime('%d.%m')
        weekday = weekdays[day['date'].weekday()]
        
        if day['date'] == today:
            day_marker = "üëâ "
        elif day['date'].weekday() < 5:
            day_marker = "üìÖ "
        else:
            day_marker = "üåÖ "
        
        message += f"{day_marker}*{weekday}* ({date_str})\n"
        message += f"    {day['duty']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    message += "\n*–ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã:*\n"
    message += "üìÜ 5/2 (–ü–Ω-–ü—Ç) - –ö–∞—Ä–ø—É—Ö–∏–Ω –ü.\n"
    message += "üîÑ 2/2 - –Æ–¥–∏–Ω –ö., –û–±–æ—Ä–¥–æ–µ–≤ –í.\n"
    
    keyboard = [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="duty:prev_week"),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚ñ∂Ô∏è", callback_data="duty:next_week")
        ],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:back")]
    ]
    
    await query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_button_click(update, context):
    query = update.callback_query
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω callback query: {query.data}")
        data = query.data.split(':')
        action = data[0]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if action == 'menu':
            menu_action = data[1]
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é: {menu_action}")
            
            if menu_action == 'tasks':
                await show_active_tasks(query, context)
            elif menu_action == 'urgent':
                await show_urgent_tasks(query, context)
            elif menu_action == 'duty':
                await show_duty_schedule(query)
            elif menu_action == 'status':
                await show_status_from_callback(query)
            elif menu_action == 'services':
                message = await check_edu_services()
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:back")]
                ]
                await query.message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif menu_action == 'help':
                await show_help_from_callback(query)
            elif menu_action == 'back':
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=create_main_menu_keyboard()
                )
            await query.answer()
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–Ω—é, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏
        issue_key = data[1] if len(data) > 1 else None
        print(f"–†–∞–∑–±–æ—Ä callback data: action={action}, issue_key={issue_key}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É analyze
        if action == 'analyze':
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ {issue_key}")
            try:
                issue = jira.issue(issue_key)
                transitions = jira.transitions(issue)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                current_status = issue.fields.status.name
                print(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {issue_key}: {current_status}")
                
                if current_status == "–¢–ò–ö–ï–¢ –°–û–ó–î–ê–ù":
                    # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
                    print("–°—Ç–∞—Ç—É—Å '–¢–ò–ö–ï–¢ –°–û–ó–î–ê–ù': –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–≤—É—Ö—à–∞–≥–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥")
                    
                    # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
                    transition_id = "271"  # ID –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
                    print(f"–®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ '–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' (ID: {transition_id})")
                    jira.transition_issue(issue, transition_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
                    transitions = jira.transitions(issue)
                    
                    # –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                    transition_id = "81"  # ID –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                    print(f"–®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –≤ '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è' (ID: {transition_id})")
                    jira.transition_issue(issue, transition_id)
                    
                else:
                    # –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                    print(f"–°—Ç–∞—Ç—É—Å '{current_status}': –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è'")
                    transition_id = "81"
                    jira.transition_issue(issue, transition_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                new_keyboard = create_task_keyboard(issue_key, True)
                await query.message.edit_reply_markup(reply_markup=new_keyboard)
                await query.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è'")
                print(f"–ó–∞–¥–∞—á–∞ {issue_key} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è'")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (assign, details, take, at, comment, back)
        elif action == 'assign':
            print("–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            try:
                keyboard = create_staff_keyboard(issue_key)
                await query.message.edit_reply_markup(reply_markup=keyboard)
                await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                print("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É details
        elif action == 'details':
            print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_key}")
            try:
                issue = jira.issue(issue_key)
                details = f"""
<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ {issue_key}</b>

–°—Ç–∞—Ç—É—Å: {issue.fields.status.name}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {issue.fields.priority.name}
–°–æ–∑–¥–∞–Ω–∞: {issue.fields.created[:10]}
–ê–≤—Ç–æ—Ä: {issue.fields.reporter.displayName}
"""
                await query.message.reply_text(
                    text=details,
                    parse_mode='HTML'
                )
                await query.answer()
                print(f"–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ {issue_key} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É take
        elif action == 'take':
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É –∑–∞–¥–∞—á–∏ {issue_key}")
            try:
                current_status = task_status.get(issue_key, False)
                task_status[issue_key] = not current_status

                if not current_status:
                    keyboard = create_take_action_keyboard(issue_key)
                    await query.message.edit_reply_markup(reply_markup=keyboard)
                    await query.answer("–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
                    print(f"–ó–∞–¥–∞—á–∞ {issue_key} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
                else:
                    keyboard = create_task_keyboard(issue_key, False)
                    await query.message.edit_reply_markup(reply_markup=keyboard)
                    await query.answer("–ó–∞–¥–∞—á–∞ —Å–Ω—è—Ç–∞ —Å —Ä–∞–±–æ—Ç—ã")
                    print(f"–ó–∞–¥–∞—á–∞ {issue_key} —Å–Ω—è—Ç–∞ —Å —Ä–∞–±–æ—Ç—ã")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑—è—Ç–∏—è –∑–∞–¥–∞—á–∏: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É at (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
        elif action == 'at':
            try:
                issue_key = data[1]
                staff_idx = int(data[2])
                
                if 0 <= staff_idx < len(SUPPORT_STAFF):
                    staff = SUPPORT_STAFF[staff_idx]
                    user_login = staff['jira_login']

                    if not user_login:
                        await query.answer("–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –≤ Jira")
                        return

                    issue = jira.issue(issue_key)
                    jira.assign_issue(issue, user_login)

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∑–∞–¥–∞—á–∏
                    keyboard = create_task_keyboard(issue_key, task_status.get(issue_key, False))
                    await query.message.edit_reply_markup(reply_markup=keyboard)
                    await query.answer(f"–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {staff['name']}")
                    print(f"–ó–∞–¥–∞—á–∞ {issue_key} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {staff['name']}")
                else:
                    await query.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É comment
        elif action == 'comment':
            print("–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await query.answer("–§—É–Ω–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É back
        elif action == 'back':
            print(f"–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_key}")
            try:
                keyboard = create_task_keyboard(issue_key, task_status.get(issue_key, False))
                await query.message.edit_reply_markup(reply_markup=keyboard)
                await query.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é: {e}")
                await query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def show_recent_tasks(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á"""
    try:
        # JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á
        jql = 'project = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Informatics" ORDER BY created DESC'
        issues = jira.search_issues(jql, maxResults=10)

        if not issues:
            await query.message.edit_text(
                "üîç –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_main_menu_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üì• *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n\n"
        
        for idx, issue in enumerate(issues, 1):
            priority = getattr(issue.fields, 'priority', None)
            priority_text = priority.name if priority else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_emoji = {
                "–ë–æ–º–±–∏—Ç": "üí£",
                "–°—Ä–æ—á–Ω—ã–π": "üî¥",
                "–í—ã—Å–æ–∫–∏–π": "üü†",
                "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π": "üü°",
                "–ù–∏–∑–∫–∏–π": "‚ö™"
            }.get(priority_text, "‚ö™")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = issue.fields.status.name

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏
            message += (
                f"{idx}. {priority_emoji} [{issue.key}]({JIRA_SERVER}/browse/{issue.key})\n"
                f"   *{issue.fields.summary[:100]}*\n"
                f"   –°—Ç–∞—Ç—É—Å: {status}\n"
                f"   –°–æ–∑–¥–∞–Ω–∞: {issue.fields.created[:10]}\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        message += "\n_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á_"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:back")]
        ]

        await query.message.edit_text(
            message,
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á: {e}")
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á",
            reply_markup=create_main_menu_keyboard()
        )

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    asyncio.run(main())
    