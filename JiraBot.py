from JiraBot.config.settings import TELEGRAM_TOKEN
from JiraBot.handlers.callback_handlers import show_status_from_callback, show_help_from_callback
from JiraBot.handlers.command_handlers import show_active_tasks, show_urgent_tasks, check_status, \
    handle_button_click
from JiraBot.main import main
from JiraBot.models.bot_stats import bot_stats
from JiraBot.services.monitoring import check_edu_services, check_services_command
from JiraBot.utils.keyboards import create_main_menu_keyboard
from JiraBot.utils.scheduler import scheduler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
import asyncio


# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö callback-–∫–Ω–æ–ø–æ–∫
async def handle_button_click(update, context):
    query = update.callback_query
    try:
        bot_stats.add_user(update.effective_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        data = query.data.split(':')
        action = data[0]

        if action == 'menu':
            menu_action = data[1]
            if menu_action == 'tasks':
                await show_active_tasks(query, context)
            elif menu_action == 'urgent':
                await show_urgent_tasks(query, context)
            elif menu_action == 'search':
                await query.message.edit_text(
                    "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/search <—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞>",
                    reply_markup=create_main_menu_keyboard()
                )
            elif menu_action == 'status':
                await show_status_from_callback(query)
            elif menu_action == 'help':
                await show_help_from_callback(query)
            elif menu_action == 'services':
                message = await check_edu_services()
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:back")]
                ]
                await query.message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif menu_action == 'back':
                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=create_main_menu_keyboard()
                )
            await query.answer()

        elif action == 'take':
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
            ...

        elif action == 'analyze':
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è"
            ...

        elif action == 'back':
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            ...

    except Exception as e:
        bot_stats.add_error(e)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    asyncio.run(main())